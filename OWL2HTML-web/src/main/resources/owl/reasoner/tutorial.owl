Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(swrlb:=<http://www.w3.org/2003/11/swrlb#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(var:=<urn:swrl#>)
Prefix(var2:=<urn:http://www.w3.org/2003/11/swrl#>)
Prefix(:=<http://acrab.ics.muni.cz/ontologies/tutorial.owl#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(swrl:=<http://www.w3.org/2003/11/swrl#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(tutorial:=<http://acrab.ics.muni.cz/ontologies/tutorial.owl#>)


Ontology(<http://acrab.ics.muni.cz/ontologies/tutorial.owl>

Declaration(Class(:Boy))
EquivalentClasses(:Boy ObjectOneOf(:SmallBoy :BigBoy))
SubClassOf(:Boy :Child)
Declaration(Class(:Boy_or_Small))
EquivalentClasses(:Boy_or_Small ObjectUnionOf(:Small :Boy))
SubClassOf(:Boy_or_Small :Child)
Declaration(Class(:Child))
SubClassOf(:Child :Person)
Declaration(Class(:ChildOfICSEmployee))
EquivalentClasses(:ChildOfICSEmployee ObjectHasValue(:hasEmployedParent :ICS))
SubClassOf(:ChildOfICSEmployee :Person)
Declaration(Class(:ChildOfMarriedParents))
SubClassOf(:ChildOfMarriedParents :Person)
Declaration(Class(:Czech))
SubClassOf(:Czech :Person)
Declaration(Class(:Employee))
EquivalentClasses(:Employee ObjectSomeValuesFrom(:isEmployedAt :OrgUnit))
SubClassOf(:Employee :Person)
Declaration(Class(:EmployeesOfMU))
EquivalentClasses(:EmployeesOfMU ObjectHasValue(:isEmployedAt :MU))
SubClassOf(:EmployeesOfMU :Person)
Declaration(Class(:Girl))
EquivalentClasses(:Girl ObjectIntersectionOf(ObjectComplementOf(:Boy) :Child))
SubClassOf(:Girl :Child)
Declaration(Class(:OrgUnit))
Declaration(Class(:Person))
SubClassOf(:Person ObjectMaxCardinality(2 :hasParent))
Declaration(Class(:Small))
EquivalentClasses(:Small ObjectOneOf(:SmallBoy :SmallGirl))
SubClassOf(:Small :Child)
Declaration(Class(:Small_and_Boy))
EquivalentClasses(:Small_and_Boy ObjectIntersectionOf(:Small :Boy))
SubClassOf(:Small_and_Boy :Child)
Declaration(Class(:Student))
SubClassOf(:Student :Person)
Declaration(ObjectProperty(:hasEmployedParent))
Declaration(ObjectProperty(:hasParent))
Declaration(ObjectProperty(:hasPart))
InverseObjectProperties(:isPartOf :hasPart)
Declaration(ObjectProperty(:hasSpouse))
FunctionalObjectProperty(:hasSpouse)
SymmetricObjectProperty(:hasSpouse)
IrreflexiveObjectProperty(:hasSpouse)
Declaration(ObjectProperty(:isEmployedAt))
Declaration(ObjectProperty(:isPartOf))
InverseObjectProperties(:isPartOf :hasPart)
TransitiveObjectProperty(:isPartOf)
Declaration(DataProperty(:hasEmail))
Declaration(NamedIndividual(:BigBoy))
ClassAssertion(:Child :BigBoy)
Declaration(NamedIndividual(:BigGirl))
ClassAssertion(:Child :BigGirl)
Declaration(NamedIndividual(:ICS))
AnnotationAssertion(rdfs:label :ICS "Institute of Computer Science"@en)
AnnotationAssertion(rdfs:label :ICS "Ustav vypocetni techniky"@cs)
ClassAssertion(:OrgUnit :ICS)
ObjectPropertyAssertion(:isPartOf :ICS :MU)
Declaration(NamedIndividual(:Ivan))
ClassAssertion(:Person :Ivan)
ObjectPropertyAssertion(:hasParent :Ivan :Martin)
ObjectPropertyAssertion(:hasParent :Ivan :Lenka)
Declaration(NamedIndividual(:Lenka))
ClassAssertion(:Czech :Lenka)
ClassAssertion(:Person :Lenka)
Declaration(NamedIndividual(:MU))
AnnotationAssertion(rdfs:label :MU "Masarykova univerzita"@cs)
AnnotationAssertion(rdfs:label :MU "Masaryk University"@en)
ClassAssertion(:OrgUnit :MU)
Declaration(NamedIndividual(:Martin))
ClassAssertion(:Czech :Martin)
ClassAssertion(:Student :Martin)
ObjectPropertyAssertion(:hasSpouse :Martin :Lenka)
ObjectPropertyAssertion(:isEmployedAt :Martin :SC)
DataPropertyAssertion(:hasEmail :Martin "makub@ics.muni.cz"^^xsd:string)
Declaration(NamedIndividual(:SC))
AnnotationAssertion(rdfs:label :SC "Supercomputing Center"@en)
AnnotationAssertion(rdfs:label :SC "Superpocitacove centrum"@cs)
ClassAssertion(:OrgUnit :SC)
ObjectPropertyAssertion(:isPartOf :SC :ICS)
Declaration(NamedIndividual(:SmallBoy))
ClassAssertion(:Child :SmallBoy)
Declaration(NamedIndividual(:SmallGirl))
ClassAssertion(:Child :SmallGirl)
SubObjectPropertyOf(ObjectPropertyChain(:isEmployedAt :isPartOf) :isEmployedAt)
SubClassOf(Annotation(rdfs:comment "dedicni cechove") Annotation(rdfs:label "cechove rodem") ObjectAllValuesFrom(:hasParent :Czech) :Czech)
DifferentIndividuals(:BigBoy :BigGirl :SmallBoy :SmallGirl)
DifferentIndividuals(:BigBoy :BigGirl :ICS :Ivan :Lenka :MU :Martin :SC :SmallBoy :SmallGirl)
SubObjectPropertyOf(ObjectPropertyChain(:hasParent :isEmployedAt) :hasEmployedParent)
DLSafeRule(Body(ClassAtom(:Person Variable(var:x)) ObjectPropertyAtom(:hasParent Variable(var:x) Variable(var:y)) ObjectPropertyAtom(:hasParent Variable(var:x) Variable(var:z)) ObjectPropertyAtom(:hasSpouse Variable(var:y) Variable(var:z)))Head(ClassAtom(:ChildOfMarriedParents Variable(var:x))))
)
